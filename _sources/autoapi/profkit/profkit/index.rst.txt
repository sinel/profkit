:py:mod:`profkit.profkit`
=========================

.. py:module:: profkit.profkit

.. autoapi-nested-parse::

   Profkit.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   profkit.profkit.Profkit



Functions
~~~~~~~~~

.. autoapisummary::

   profkit.profkit.about



.. py:class:: Profkit(settings: Optional[dict[str, Any]] = None, filepath: str = 'profkit.yaml')


   Profkit class.

   Args:
       settings: Profkit settings.
       filepath: Relative filepath to yaml settings file.

   .. py:class:: ProfilerLibrary


      Bases: :py:obj:`enum.StrEnum`

      Profiler library enumeration.

      .. py:attribute:: CPROFILE
         :value: 'cprofile'

         

      .. py:attribute:: PYINSTRUMENT
         :value: 'pyinstrument'

         

      .. py:attribute:: YAPPI
         :value: 'yappi'

         


   .. py:method:: _has_profiler(name: str) -> bool

      Checks if profkit instance has profiler.

      Args:
          name: Profiler name. Must be unique within scope of Profkit instance.


   .. py:method:: _get_profiler(name: str) -> Optional[profkit.profilers.profiler.Profiler]

      Gets profiler.

      Args:
          name: Profiler name. Must be unique within scope of Profkit instance.


   .. py:method:: _add_profiler(name: Optional[str] = None, profiler: Optional[Union[profkit.profilers.profiler.Profiler, ProfilerLibrary]] = None) -> tuple[str, profkit.profilers.profiler.Profiler]

      Adds profiler.

      Args:
          name: Profiler name. Must be unique within scope of Profkit instance.
          profiler: Profiler instance
              or profiler library to use for creating new profiler instance.


   .. py:method:: _remove_profiler(name: str) -> None

      Removes profiler.

      Args:
          name: Profiler name. Must be unique within scope of Profkit instance.


   .. py:method:: _create_profiler(profiler_library: Optional[ProfilerLibrary] = None) -> profkit.profilers.profiler.Profiler

      Creates profiler.

      Args:
          profiler_library: Profiler library.

      Returns:
          :py:class:`profkit.profiler.Profiler`


   .. py:method:: profile(library: Optional[ProfilerLibrary] = None, callback: Optional[Callable[[profkit.profilers.profiler.Profiler], None]] = None) -> Any

      Decorator for profiling the execution of a function.

      Args:
          library: Profiler library.
          callback: Callback function to process profiler results.

      Returns:
          Wrapper function for decorator.



.. py:function:: about() -> None

   Provides information about Profkit.


