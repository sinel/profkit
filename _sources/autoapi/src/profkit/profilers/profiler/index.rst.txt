:py:mod:`src.profkit.profilers.profiler`
========================================

.. py:module:: src.profkit.profilers.profiler

.. autoapi-nested-parse::

   Profiler.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   src.profkit.profilers.profiler.Profiler




.. py:class:: Profiler(settings: Optional[profkit.settings.ProfilerSettings] = None)


   Profiler class.

   Args:
       settings: Profiler settings.

   .. py:method:: begin() -> Any
      :abstractmethod:

      Profiler.begin.

      Begin profiling.

      Returns:
          Any


   .. py:method:: end() -> Any
      :abstractmethod:

      Profiler.end.

      End profiling.

      Returns:
          Any


   .. py:method:: output_to_text(verbose: bool = False, filepath: Optional[Union[str, pathlib.Path]] = None) -> str
      :abstractmethod:

      Profiler.output_to_text.

      Returns profiler output as text.

      Args:
          verbose: If True, outputs more detailed info.
          filepath: If specified, output is saved.

      Returns:
          Output as text.


   .. py:method:: output_to_callgrind(filepath: Optional[Union[str, pathlib.Path]] = None) -> Optional[list[str]]
      :abstractmethod:

      Profiler.output_to_callgrind.

      Returns profiler output in callgrind format.

      Args:
          filepath: If specified, output is saved.

      Returns:
          Output in callgrind format.


   .. py:method:: output_to_pstats(filepath: Optional[Union[str, pathlib.Path]] = None) -> pstats.Stats
      :abstractmethod:

      Profiler.output_to_pstats.

      Returns profiler output in pstats format.

      Args:
          filepath: If specified, output is saved.

      Returns:
          Output in pstats format.


   .. py:method:: print(verbose: bool = False) -> None
      :abstractmethod:

      Profiler.print.

      Prints profiler output.

      Args:
          verbose: If True, outputs more detailed info.

      Returns:
          Any



